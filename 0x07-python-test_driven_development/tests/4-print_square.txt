===========================
How 4-print_square.py works
===========================

This library contains a function ``print_square()``
it prints a square with the character


	>>> print_square = __import__("4-print_square").print_square

Documentation
=============

	>>> module_doc = __import__("4-print_square").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("4-print_square").__doc__
	>>> print(len(func_doc) > 0)
	True

Basic
=====
If the argument ``size`` is an integer, then the operation happen smoothly
	>>> print_square(5)
	#####
	#####
	#####
	#####
	#####

	>>> print_square(3)
	###
	###
	###

If size is not integer
======================
if the type of size is not an int, it raise exceptions

	>>> print_square("r")
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square([])
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square(True)
	#

	>>> print_square((1,2))
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square([1,2])
	Traceback (most recent call last):
	TypeError: size must be an integer



If size less than 0
===================
if the size < 0, it raises a valueError

	>>> print_square(-1)
	Traceback (most recent call last):
	ValueError: size must be >= 0

If size is a float and less than 0
==================================
if size is a float and < 0, it raises a TypeError exception

	>>> print_square(-1.2)
	Traceback (most recent call last):
	TypeError: size must be an integer

Missing Arguments

	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'
